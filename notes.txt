Создание нового проекта Django - 

python manage.py startproject <name>

!примечание!
Для запуска файла manage.py нужно находиться в одной папке с этим файлом
Для перехода во вложенную папку <name> используется команда cd <name>


Запуск сервера - 

python manage.py runserver

Создание нового веб-сервиса - 

python manage.py startapp <name2>

План работы по созданию и демонстрации моделей в Django
1. Зарегистрироваться на административном сайте
2. Создать модель AnimeTitle
3. Провести миграции
4. Зарегистрировать модель AnimeTitle
5. Показать все объекты AnimeTitle на экране 

Для того, чтобы зарегистрироватьс на административном сайте, нужно написать команду python manage.py createsuperuser. Перед этим для того, чтобы приготовить проект к новым данным, нужно провести миграции
Миграции проводятся при помощи команд python manage.py makemigrations и python manage.py migrate 

Основные положения веб-разработки
Веб-страница и веб-сайт
Веб-страница - это пачка связанных между собой текстовых файлов
Веб-сайт - это пачка связанных между собой веб-страниц

Веб-проект Django - результат работы команды startproject. Это все конфигурации всех веб-сервисов, а также вся маршрутизация и все, что связано с деплоем

Веб-сервси (веб-приложение) - это результат работы команды startapp. Это конкретный комплекс инструментов, которые реализуют один (чаще всего) сайт.

В Django есть собственные механизмы для обслуживания веб-сервисов.
Django ORM позволяет работать с данными при помощи встроенной базы данных.
Шаблонизатор Django позволяет вставлять контекст (данные из программы) в веб-страницы.

Django ORM позволяет обходиться без языка SQL при работе с базой данных. Работая с ORM, можно создавать таблицы данных в виде классов Python.

Для того, чтобы все изменения, касающиеся работы с данными через Django ORM, зафиксировались в проекте, нужно произвести миграции.

Для того, чтобы получить возможность редактировать объекты в Django ORM через административный сайт, нужно создать суперпользователя (админа). Потом нужно зарегистрировать новую модель данных в файле admin.py

Шаблонизатор Django работает в файле views.py, где формируется контекст для передачи на веб-страницу. Контекстные переменные являются словарями. Ключи словаря контекста являются переменными контекста. К этим переменным можно обращаться на веб-странице при помощи специальных конструкций:

1. Переменная - пишется как {{переменная контекста}}
2. Управляющий блок - пишется как {% управляющая конструкция %}

{% if <условие> %}
{% endif %}

{% for %}
{% endfor %}

{% block %}
{% endblock %}

{% extends <адрес страницы> %}


Реализация механики аутентификации на сайте

1. Вход
Закрытый контент никак не может открыться пользователю, пока он не войдет на сайт

HTML-формы - это тег <form>, который имеет блочное поведение
HTML-формы могут работать в двух режимах - GET и POST

2. Регистрация
Получение и хранение пользовательских данных

Пользователь может войти на сайт не только при помощи админских учеток, но и при помощи своих собственных данных

План работы по внедрению пользовательских учетных записей

- страница или окно регистрации
- страница личного кабинета
- новая ORM-модель для пользователей
- интерфейс избранных аниме и добавления аниме в избранные

Введение в JavaScript

В JS строгая динамическая типизация. Это значит, что переменные должны быть объявлены в начале программы.
Основное отличие var от let заключается в том, что var создает глобальную переменную, а let создает локальную переменную.

